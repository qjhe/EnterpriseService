/*
	分页展示按钮控件 kkpager
*/
var kkpager = {
    pagerid: "kkpager",
    mode: "link",
    pno: 1,
    total: 1,
    totalRecords: 0,
    isShowFirstPageBtn: true,
    isShowLastPageBtn: true,
    isShowPrePageBtn: true,
    isShowNextPageBtn: true,
    isShowTotalPage: true,
    isShowTotalRecords: false,
    isGoPage: true,
    hrefFormer: "",
    hrefLatter: "",
    gopageWrapId: "kkpager_gopage_wrap",
    gopageButtonId: "kkpager_btn_go",
    gopageTextboxId: "kkpager_btn_go_input",
    lang: {
        firstPageText: "首页",
        firstPageTipText: "首页",
        lastPageText: "尾页",
        lastPageTipText: "尾页",
        prePageText: "上一页",
        prePageTipText: "上一页",
        nextPageText: "下一页",
        nextPageTipText: "下一页",
        totalPageBeforeText: "共",
        totalPageAfterText: "页",
        totalRecordsAfterText: "条数据",
        gopageBeforeText: "转到",
        gopageButtonOkText: "确定",
        gopageAfterText: "页",
        buttonTipBeforeText: "第",
        buttonTipAfterText: "页"
    },
    getLink: function(n) {
        if (n == 1) {
            return this.hrefFormer + this.hrefLatter
        } else {
            return this.hrefFormer + "_" + n + this.hrefLatter
        }
    },
    click: function(n) {
        return false
    },
    getHref: function(n) {
        return "#"
    },
    focus_gopage: function() {
        var btnGo = $("#" + this.gopageButtonId);
        $("#" + this.gopageTextboxId).attr("hideFocus", true);
        btnGo.show();
        btnGo.css("left", "0px");
        $("#" + this.gopageWrapId).css("border-color", "#6694E3");
        btnGo.animate({
            left: "+=44"
        },
        50,
        function() {})
    },
    blur_gopage: function() {
        var _this = this;
        setTimeout(function() {
            var btnGo = $("#" + _this.gopageButtonId);
            btnGo.animate({
                left: "-=44"
            },
            100,
            function() {
                btnGo.css("left", "0px");
                btnGo.hide();
                $("#" + _this.gopageWrapId).css("border-color", "#DFDFDF")
            })
        },
        400)
    },
    gopage: function() {
        var str_page = $("#" + this.gopageTextboxId).val();
        if (isNaN(str_page)) {
            $("#" + this.gopageTextboxId).val(this.next);
            return
        }
        var n = parseInt(str_page);
        if (n < 1) {
            n = 1
        }
        if (n > this.total) {
            n = this.total
        }
        if (this.mode == "click") {
            this._clickHandler(n)
        } else {
            window.location = this.getLink(n)
        }
    },
    selectPage: function(n) {
        this._config["pno"] = n;
        this.generPageHtml(this._config, true)
    },
    generPageHtml: function(config, enforceInit) {
        if (enforceInit || !this.inited) {
            this.init(config)
        }
        var str_first = "",
        str_prv = "",
        str_next = "",
        str_last = "";
        if (this.isShowFirstPageBtn) {
            if (this.hasPrv) {
                str_first = "<a " + this._getHandlerStr(1) + ' title="' + (this.lang.firstPageTipText || this.lang.firstPageText) + '">' + this.lang.firstPageText + "</a>"
            } else {
                str_first = '<span class="disabled">' + this.lang.firstPageText + "</span>"
            }
        }
        if (this.isShowPrePageBtn) {
            if (this.hasPrv) {
                str_prv = "<a " + this._getHandlerStr(this.prv) + ' title="' + (this.lang.prePageTipText || this.lang.prePageText) + '">' + this.lang.prePageText + "</a>"
            } else {
                str_prv = '<span class="disabled">' + this.lang.prePageText + "</span>"
            }
        }
        if (this.isShowNextPageBtn) {
            if (this.hasNext) {
                str_next = "<a " + this._getHandlerStr(this.next) + ' title="' + (this.lang.nextPageTipText || this.lang.nextPageText) + '">' + this.lang.nextPageText + "</a>"
            } else {
                str_next = '<span class="disabled">' + this.lang.nextPageText + "</span>"
            }
        }
        if (this.isShowLastPageBtn) {
            if (this.hasNext) {
                str_last = "<a " + this._getHandlerStr(this.total) + ' title="' + (this.lang.lastPageTipText || this.lang.lastPageText) + '">' + this.lang.lastPageText + "</a>"
            } else {
                str_last = '<span class="disabled">' + this.lang.lastPageText + "</span>"
            }
        }
        var str = "";
        var dot = "<span>...</span>";
        var total_info = "";
        if (this.isShowTotalPage || this.isShowTotalRecords) {
            total_info = '&nbsp;<span class="normalsize">' + this.lang.totalPageBeforeText;
            if (this.isShowTotalPage) {
                total_info += this.total + this.lang.totalPageAfterText;
                if (this.isShowTotalRecords) {
                    total_info += "/"
                }
            }
            if (this.isShowTotalRecords) {
                total_info += this.totalRecords + this.lang.totalRecordsAfterText
            }
            total_info += "</span>"
        }
        var gopage_info = "";
        if (this.isGoPage) {
            gopage_info = "&nbsp;" + this.lang.gopageBeforeText + '<span id="' + this.gopageWrapId + '">' + '<input type="button" id="' + this.gopageButtonId + '" onclick="kkpager.gopage()" value="' + this.lang.gopageButtonOkText + '" />' + '<input type="text" id="' + this.gopageTextboxId + '" onfocus="kkpager.focus_gopage()"  onkeypress="if(event.keyCode<48 || event.keyCode>57)return false;"   onblur="kkpager.blur_gopage()" value="' + this.next + '" /></span>' + this.lang.gopageAfterText
        }
        if (this.total <= 8) {
            for (var i = 1; i <= this.total; i++) {
                if (this.pno == i) {
                    str += '<span class="curr">' + i + "</span>"
                } else {
                    str += "<a " + this._getHandlerStr(i) + ' title="' + this.lang.buttonTipBeforeText + i + this.lang.buttonTipAfterText + '">' + i + "</a>"
                }
            }
        } else {
            if (this.pno <= 5) {
                for (var i = 1; i <= 7; i++) {
                    if (this.pno == i) {
                        str += '<span class="curr">' + i + "</span>"
                    } else {
                        str += "<a " + this._getHandlerStr(i) + ' title="' + this.lang.buttonTipBeforeText + i + this.lang.buttonTipAfterText + '">' + i + "</a>"
                    }
                }
                str += dot;
                for (var i = 1; i >= 0; i--) {
                    str += "<a " + this._getHandlerStr(this.total - i) + ' title="' + this.lang.buttonTipBeforeText + (this.total - i) + this.lang.buttonTipAfterText + '">' + (this.total - i) + "</a>"
                }
            } else {
                str += "<a " + this._getHandlerStr(1) + ' title="' + this.lang.buttonTipBeforeText + "1" + this.lang.buttonTipAfterText + '">1</a>';
                str += "<a " + this._getHandlerStr(2) + ' title="' + this.lang.buttonTipBeforeText + "2" + this.lang.buttonTipAfterText + '">2</a>';
                str += dot;
                var begin = this.pno - 2;
                var end = this.pno + 2;
                if (end > this.total) {
                    end = this.total;
                    begin = end - 4;
                    if (this.pno - begin < 2) {
                        begin = begin - 1
                    }
                } else {
                    if (end + 1 == this.total) {
                        end = this.total
                    }
                }
                for (var i = begin; i <= end; i++) {
                    if (this.pno == i) {
                        str += '<span class="curr">' + i + "</span>"
                    } else {
                        str += "<a " + this._getHandlerStr(i) + ' title="' + this.lang.buttonTipBeforeText + i + this.lang.buttonTipAfterText + '">' + i + "</a>"
                    }
                }
                if (end != this.total) {
                    if( (this.total-end) > 2 ) str += dot;
                    for (var i = 1; i >= 0; i--) {
                        str += "<a " + this._getHandlerStr(this.total - i) + ' title="' + this.lang.buttonTipBeforeText + (this.total - i) + this.lang.buttonTipAfterText + '">' + (this.total - i) + "</a>"
                    }
                }
            }
        }
        str = "&nbsp;" + str_first + str_prv + str + str_next + str_last + total_info + gopage_info;
        $("#" + this.pagerid).html(str)
    },
    init: function(config) {
        this.pno = isNaN(config.pno) ? 1 : parseInt(config.pno);
        this.total = isNaN(config.total) ? 1 : parseInt(config.total);
        this.totalRecords = isNaN(config.totalRecords) ? 0 : parseInt(config.totalRecords);
        if (config.pagerid) {
            this.pagerid = config.pagerid
        }
        if (config.mode) {
            this.mode = config.mode
        }
        if (config.gopageWrapId) {
            this.gopageWrapId = config.gopageWrapId
        }
        if (config.gopageButtonId) {
            this.gopageButtonId = config.gopageButtonId
        }
        if (config.gopageTextboxId) {
            this.gopageTextboxId = config.gopageTextboxId
        }
        if (config.isShowFirstPageBtn != undefined) {
            this.isShowFirstPageBtn = config.isShowFirstPageBtn
        }
        if (config.isShowLastPageBtn != undefined) {
            this.isShowLastPageBtn = config.isShowLastPageBtn
        }
        if (config.isShowPrePageBtn != undefined) {
            this.isShowPrePageBtn = config.isShowPrePageBtn
        }
        if (config.isShowNextPageBtn != undefined) {
            this.isShowNextPageBtn = config.isShowNextPageBtn
        }
        if (config.isShowTotalPage != undefined) {
            this.isShowTotalPage = config.isShowTotalPage
        }
        if (config.isShowTotalRecords != undefined) {
            this.isShowTotalRecords = config.isShowTotalRecords
        }
        if (config.isGoPage != undefined) {
            this.isGoPage = config.isGoPage
        }
        if (config.lang) {
            for (var key in config.lang) {
                this.lang[key] = config.lang[key]
            }
        }
        this.hrefFormer = config.hrefFormer || "";
        this.hrefLatter = config.hrefLatter || "";
        if (config.getLink && typeof(config.getLink) == "function") {
            this.getLink = config.getLink
        }
        if (config.click && typeof(config.click) == "function") {
            this.click = config.click
        }
        if (config.getHref && typeof(config.getHref) == "function") {
            this.getHref = config.getHref
        }
        if (!this._config) {
            this._config = config
        }
        if (this.pno < 1) {
            this.pno = 1
        }
        this.total = (this.total <= 1) ? 1 : this.total;
        if (this.pno > this.total) {
            this.pno = this.total
        }
        this.prv = (this.pno <= 2) ? 1 : (this.pno - 1);
        this.next = (this.pno >= this.total - 1) ? this.total: (this.pno + 1);
        this.hasPrv = (this.pno > 1);
        this.hasNext = (this.pno < this.total);
        this.inited = true
    },
    _getHandlerStr: function(n) {
        if (this.mode == "click") {
            return 'href="' + this.getHref(n) + '" onclick="return kkpager._clickHandler(' + n + ')"'
        }
        return 'href="' + this.getLink(n) + '"'
    },
    _clickHandler: function(n) {
        var res = false;
        if (this.click && typeof this.click == "function") {
            res = this.click.call(this, n) || false
        }
        return res
    }
};